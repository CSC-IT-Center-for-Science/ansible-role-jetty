#
# WARNING: this file is auto-generated by Ansible CSCfi.jetty role
# DO NOT EDIT
# all local changes will be overwritten!
#
# generated at {{ ansible_date_time.iso8601 }}
# ---------------------------------------
# Module: server
# Enables the core Jetty server on the classpath.
# ---------------------------------------
--module=server

### Common HTTP configuration
## Scheme to use to build URIs for secure redirects
{% if jetty_modules.httpConfig.secureScheme is defined %}
jetty.httpConfig.secureScheme={{ jetty_modules.httpConfig.secureScheme }}
{% else %}
# jetty.httpConfig.secureScheme=https
{% endif %}

## Port to use to build URIs for secure redirects
{% if jetty_modules.httpConfig.securePort is defined %}
jetty.httpConfig.securePort={{ jetty_modules.httpConfig.securePort }}
{% else %}
# jetty.httpConfig.securePort=8443
{% endif %}

## Response content buffer size (in bytes)
{% if jetty_modules.httpConfig.outputBufferSize is defined %}
jetty.httpConfig.outputBufferSize={{ jetty_modules.httpConfig.outputBufferSize }}
{% else %}
# jetty.httpConfig.outputBufferSize=32768
{% endif %}

## Max response content write length that is buffered (in bytes)
{% if jetty_modules.httpConfig.outputAggregationSize is defined %}
jetty.httpConfig.outputAggregationSize={{ jetty_modules.httpConfig.outputAggregationSize }}
{% else %}
# jetty.httpConfig.outputAggregationSize=8192
{% endif %}

## Max request headers size (in bytes)
{% if jetty_modules.httpConfig.requestHeaderSize is defined %}
jetty.httpConfig.requestHeaderSize={{ jetty_modules.httpConfig.requestHeaderSize }}
{% else %}
# jetty.httpConfig.requestHeaderSize=8192
{% endif %}

## Max response headers size (in bytes)
{% if jetty_modules.httpConfig.responseHeaderSize is defined %}
jetty.httpConfig.responseHeaderSize={{ jetty_modules.httpConfig.responseHeaderSize }}
{% else %}
# jetty.httpConfig.responseHeaderSize=8192
{% endif %}

## Whether to send the Server: header
{% if jetty_modules.httpConfig.sendServerVersion is defined %}
jetty.httpConfig.sendServerVersion={{ jetty_modules.httpConfig.sendServerVersion }}
{% else %}
# jetty.httpConfig.sendServerVersion=true
{% endif %}

## Whether to send the Date: header
{% if jetty_modules.httpConfig.sendDateHeader is defined %}
jetty.httpConfig.sendDateHeader={{ jetty_modules.httpConfig.sendDateHeader }}
{% else %}
# jetty.httpConfig.sendDateHeader=false
{% endif %}

## Max per-connection header cache size (in nodes)
{% if jetty_modules.httpConfig.headerCacheSize is defined %}
jetty.httpConfig.headerCacheSize={{ jetty_modules.httpConfig.headerCacheSize }}
{% else %}
# jetty.httpConfig.headerCacheSize=1024
{% endif %}

## Whether, for requests with content, delay dispatch until some content has arrived
{% if jetty_modules.httpConfig.delayDispatchUntilContent is defined %}
jetty.httpConfig.delayDispatchUntilContent={{ jetty_modules.httpConfig.delayDispatchUntilContent }}
{% else %}
# jetty.httpConfig.delayDispatchUntilContent=true
{% endif %}

## Maximum number of error dispatches to prevent looping
{% if jetty_modules.httpConfig.maxErrorDispatches is defined %}
jetty.httpConfig.maxErrorDispatches={{ jetty_modules.httpConfig.maxErrorDispatches }}
{% else %}
# jetty.httpConfig.maxErrorDispatches=10
{% endif %}

{% if jetty_modules.httpConfig.persistentConnectionsEnabled is defined %}
jetty.httpConfig.persistentConnectionsEnabled={{ jetty_modules.httpConfig.persistentConnectionsEnabled }}
{% else %}
jetty.httpConfig.persistentConnectionsEnabled=true
{% endif %}

## Cookie compliance mode for parsing request Cookie headers: RFC2965, RFC6265
{% if jetty_modules.httpConfig.requestCookieCompliance is defined %}
jetty.httpConfig.requestCookieCompliance={{ jetty_modules.httpConfig.requestCookieCompliance }}
{% else %}
# jetty.httpConfig.requestCookieCompliance=RFC6265
{% endif %}

## Cookie compliance mode for generating response Set-Cookie: RFC2965, RFC6265
{% if jetty_modules.httpConfig.responseCookieCompliance is defined %}
jetty.httpConfig.responseCookieCompliance={{ jetty_modules.httpConfig.responseCookieCompliance }}
{% else %}
# jetty.httpConfig.responseCookieCompliance=RFC6265
{% endif %}

## multipart/form-data compliance mode of: LEGACY(slow), RFC7578(fast)
{% if jetty_modules.httpConfig.multiPartFormDataCompliance is defined %}
jetty.httpConfig.multiPartFormDataCompliance={{ jetty_modules.httpConfig.multiPartFormDataCompliance }}
{% else %}
# jetty.httpConfig.multiPartFormDataCompliance=LEGACY
{% endif %}


### Server configuration
## Whether ctrl+c on the console gracefully stops the Jetty server
{% if jetty_modules.server.stopAtShutdown is defined %}
jetty.server.stopAtShutdown={{ jetty_modules.server.stopAtShutdown }}
{% else %}
# jetty.server.stopAtShutdown=true
{% endif %}

## Timeout in ms to apply when stopping the server gracefully
{% if jetty_modules.server.stopTimeout is defined %}
jetty.server.stopTimeout={{ jetty_modules.server.stopTimeout }}
{% else %}
# jetty.server.stopTimeout=5000
{% endif %}

## Dump the state of the Jetty server, components, and webapps after startup
{% if jetty_modules.server.dumpAfterStart is defined %}
jetty.server.dumpAfterStart={{ jetty_modules.server.dumpAfterStart }}
{% else %}
# jetty.server.dumpAfterStart=false
{% endif %}

## Dump the state of the Jetty server, components, and webapps before shutdown
{% if jetty_modules.server.dumpBeforeStop is defined %}
jetty.server.dumpBeforeStop={{ jetty_modules.server.dumpBeforeStop }}
{% else %}
# jetty.server.dumpBeforeStop=false
{% endif %}

## Scheduler Configuration
{% if jetty_modules.scheduler.name is defined %}
jetty.scheduler.name={{ jetty_modules.scheduler.name }}
{% else %}
# jetty.scheduler.name=
{% endif %}
{% if jetty_modules.scheduler.deamon is defined %}
jetty.scheduler.deamon={{ jetty_modules.scheduler.deamon }}
{% else %}
# jetty.scheduler.deamon=false
{% endif %}
{% if jetty_modules.scheduler.threads is defined %}
jetty.scheduler.threads={{ jetty_modules.scheduler.threads }}
{% else %}
# jetty.scheduler.threads=-1
{% endif %}
